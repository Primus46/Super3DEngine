#version 460 core

layout (Location = 0) in vec3 vPosition;
layout (Location = 1) in vec3 vColour;
layout (Location = 2) in vec2 vTexCoords;
layout (Location = 3) in vec3 vNormals;

uniform mat4 mesh = mat4(1.0);
uniform mat4 model = mat4(1.0);
uniform mat4 view = mat4(1.0);
uniform mat4 projection = mat4(1.0);

out vec3 fColour;
out vec2 fTexCoords;
out vec3 fNormals;
out vec3 fVertPos;
out vec3 fViewPos;

void main () {
	// combine the model and mesh to get the correct relative position of the model
	mat4 relPos = model * mesh;

	// gl_Position is the position of the vertex based on screen and then offset
	gl_Position = projection* view * relPos * vec4(vPosition, 1.0); 

	// pass the colour from the the vertex to the frag shader
	fColour = vColour;

	// pass the texture coordinates to the frag shader
	fTexCoords = vTexCoords;

	// return the normals to the fragment shader reversed
	mat3 normalMatrix = mat3(transpose(inverse(relPos)));
	fNormals = normalize(normalMatrix * vNormals);

	// Position of the vertex in world space
	fVertPos = vec3(relPos * vec4(vPosition, 1.0f));

	// get the view position
	fViewPos = vec3(view * relPos * vec4(vPosition, 1.0));
}